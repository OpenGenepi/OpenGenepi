<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ImputationArchive', 'doctrine');

/**
 * BaseImputationArchive
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $imputation_id
 * @property timestamp $imputation_date
 * @property string $imputation_type
 * @property time $duration
 * @property string $designation
 * @property float $price
 * @property string $method_of_payment
 * @property string $building_designation
 * @property string $room_designation
 * @property string $computer_name
 * @property string $computer_type_of_connexion
 * @property integer $user_archive_id
 * @property UserArchive $UserArchive
 * 
 * @method integer           getId()                         Returns the current record's "id" value
 * @method integer           getImputationId()               Returns the current record's "imputation_id" value
 * @method timestamp         getImputationDate()             Returns the current record's "imputation_date" value
 * @method string            getImputationType()             Returns the current record's "imputation_type" value
 * @method time              getDuration()                   Returns the current record's "duration" value
 * @method string            getDesignation()                Returns the current record's "designation" value
 * @method float             getPrice()                      Returns the current record's "price" value
 * @method string            getMethodOfPayment()            Returns the current record's "method_of_payment" value
 * @method string            getBuildingDesignation()        Returns the current record's "building_designation" value
 * @method string            getRoomDesignation()            Returns the current record's "room_designation" value
 * @method string            getComputerName()               Returns the current record's "computer_name" value
 * @method string            getComputerTypeOfConnexion()    Returns the current record's "computer_type_of_connexion" value
 * @method integer           getUserArchiveId()              Returns the current record's "user_archive_id" value
 * @method UserArchive       getUserArchive()                Returns the current record's "UserArchive" value
 * @method ImputationArchive setId()                         Sets the current record's "id" value
 * @method ImputationArchive setImputationId()               Sets the current record's "imputation_id" value
 * @method ImputationArchive setImputationDate()             Sets the current record's "imputation_date" value
 * @method ImputationArchive setImputationType()             Sets the current record's "imputation_type" value
 * @method ImputationArchive setDuration()                   Sets the current record's "duration" value
 * @method ImputationArchive setDesignation()                Sets the current record's "designation" value
 * @method ImputationArchive setPrice()                      Sets the current record's "price" value
 * @method ImputationArchive setMethodOfPayment()            Sets the current record's "method_of_payment" value
 * @method ImputationArchive setBuildingDesignation()        Sets the current record's "building_designation" value
 * @method ImputationArchive setRoomDesignation()            Sets the current record's "room_designation" value
 * @method ImputationArchive setComputerName()               Sets the current record's "computer_name" value
 * @method ImputationArchive setComputerTypeOfConnexion()    Sets the current record's "computer_type_of_connexion" value
 * @method ImputationArchive setUserArchiveId()              Sets the current record's "user_archive_id" value
 * @method ImputationArchive setUserArchive()                Sets the current record's "UserArchive" value
 * 
 * @package    GENEPI
 * @subpackage model
 * @author     Pierre Boitel, Bastien Libersa, Paul PÃ©riÃ©
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseImputationArchive extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('imputation_archive');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('imputation_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('imputation_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('imputation_type', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('duration', 'time', 25, array(
             'type' => 'time',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('designation', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('price', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('method_of_payment', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('building_designation', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('room_designation', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('computer_name', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('computer_type_of_connexion', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('user_archive_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserArchive', array(
             'local' => 'user_archive_id',
             'foreign' => 'id'));
    }
}