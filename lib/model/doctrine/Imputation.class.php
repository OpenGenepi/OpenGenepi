<?php

/**
 * Imputation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    epi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Imputation extends BaseImputation
{
	const PURCHASE = 'purchase';
	
	const COUNTABLE_SERVICE = 'countable_service';
	
	const UNITARY_SERVICE = 'unitary_service';
	
	const SUBSCRIPTION = 'subscription';
	
	const ACCOUNT_TRANSACTION = 'account_transaction';
	
	private static $imputation_type = array(
		self::PURCHASE            => 2,
		self::COUNTABLE_SERVICE   => 3,
		self::UNITARY_SERVICE     => 4,
		self::SUBSCRIPTION        => 5,
		self::ACCOUNT_TRANSACTION => 1);
	
	
	/**
	 * 
	 * @param unknown_type $id
	 */
	public function setAccountId($id){
		if($id != 0){
			parent::_set('account_id', $id);
		}else{
			parent::_set('account_id', null);
		}
	}
	
	/**
	 * 
	 * @param unknown_type $type_of_imputation
	 */
	public static function instanciate($type_of_imputation){
		
			
		switch($type_of_imputation){
			
			case self::PURCHASE:
				$instance = new ImputationPurchase();
				break;
				
			case self::COUNTABLE_SERVICE:
				$instance = new ImputationCountableService();
				break;
				
			case self::UNITARY_SERVICE:
				$instance = new ImputationUnitaryService();
				break;
				
			case self::SUBSCRIPTION:
				$instance = new ImputationSubscription();
				break;
				
			default:
				$instance = null;
				break;
		}
		
		return $instance;
	}
	
	
 /**
	 * 
	 * @param unknown_type $type_of_imputation
	 */
	public static function instanciateForm($type_of_imputation, $object, $options){
		
			
		switch($type_of_imputation){
			
			case self::PURCHASE:
				$instance = new ImputationPurchaseForm($object, $options);
				break;
				
			case self::COUNTABLE_SERVICE:
				$instance = new ImputationCountableServiceForm($object, $options);
				break;
				
			case self::UNITARY_SERVICE:
				$instance = new ImputationUnitaryServiceForm($object, $options);
				break;
				
			case self::SUBSCRIPTION:
				$instance = new ImputationSubscriptionForm($object, $options);
				break;
				
			default:
				$instance = null;
				break;
		}
		
		return $instance;
	}
	
	
	/**
	 * 
	 * @param integer $imputation_type_as_number
	 */
	public static function retrieveTypeAsString($imputation_type_as_number){
		
		foreach(self::$imputation_type as $imputation_string => $imputation_number){
			
			if($imputation_type_as_number == $imputation_number){
				return $imputation_string;
			}
			
		}
		return null;
	}
	
	
	
	/**
	 * 
	 * @param unknown_type $parameters
	 */
	public static function getMethodOfPaymentIds($parameters){
		
		$user_id = $parameters['imputation']['user_id'];
		$mop_id = $parameters['imputation']['method_of_payment_id'];
		$account_id = $parameters['imputation']['account_id'];
		
		
		$sup_users_id = self::getSupUsersId($parameters['imputation']);
		
		$sup_mop_id = self::getSupMethodsOfPaymentId($parameters['imputation']);
		
		if(($sup_users_id != array()) && ($sup_mop_id != array())){
			
			$sup_mop_id = array_combine($sup_users_id, $sup_mop_id);
			return array_combine(array_merge(array($user_id), $sup_users_id), array_merge(array($mop_id), $sup_mop_id));
		
		}else{
			return array_combine(array($user_id),array($mop_id));
		}
	}
	
	
	/**
	 * 
	 * @param unknown_type $parameters
	 */
	public static function getAccountIds($parameters){
		
		$user_id = $parameters['imputation']['user_id'];
		$mop_id = $parameters['imputation']['method_of_payment_id'];
		$account_id = $parameters['imputation']['account_id'];
		
		
		$sup_users_id = self::getSupUsersId($parameters['imputation']);
		
		$sup_account_id = self::getSupAccountId($parameters['imputation']);
		
		if(($sup_users_id != array()) && ($sup_account_id != array())){
			
			$sup_account_id = array_combine($sup_users_id, $sup_account_id);
			return array_combine(array_merge(array($user_id), $sup_users_id), array_merge(array($account_id), $sup_account_id));
		
		}else{
			return array_combine(array($user_id),array($account_id));
		}
	}
	
	/**
	 * 
	 * @param unknown_type $parameters
	 */
	public static function getComputerIds($parameters){
		
		$user_id = $parameters['imputation']['user_id'];
		$computer_id = $parameters['computer_id'];
		
		
		$sup_users_id = self::getSupUsersId($parameters['imputation']);
		
		$sup_computer_id = self::getSupComputerId($parameters);
		
		if(($sup_users_id != array()) && ($sup_computer_id != array())){
			
			$sup_computer_id = array_combine($sup_users_id, $sup_computer_id);
			return array_combine(array_merge(array($user_id), $sup_users_id), array_merge(array($computer_id), $sup_computer_id));
		
		}else{
			return array_combine(array($user_id),array($computer_id));
		}
	}
	
	/**
	 * 
	 * @param unknown_type $parameters
	 */
	public static function cleanParameters($parameters){
		
		//Copy the parameters:
		$cleaned = $parameters;
		unset($cleaned['_csrf_token']);
		
		//For each parameters,
		foreach($cleaned['imputation'] as $param_key => $param){
			//If its name is 'method_of_payment_X' or 'account_id_X' or 'user_id_X'
			if(ereg('^method_of_payment_id_', $param_key) || ereg('^account_id_', $param_key) || ereg('^user_id_', $param_key)){
				//unset it:
				unset($cleaned['imputation'][$param_key]);
			}
		}
		
		//If the current imputation is 'unitary_service' we also have to clean the extra parameter 'computer_id_X':
		if($parameters['imputation']['imputation_type'] == ImputationDefaultValues::UNITARY_SERVICE_TYPE){
			//For each parameters,
			foreach($cleaned as $param_key => $param){
				//If its name is 'computer_id_X'
				if(ereg('^computer_id_', $param_key)){
					//unset it:
					unset($cleaned[$param_key]);
				}
			}
			
		}
		
		return $cleaned;
		
	}

	/**
	 * 
	 * @param unknown_type $parameters
	 */
	private static function getSupUsersId($parameters){
		
		$sup_users_id = array();
		
		foreach($parameters as $param_key => $param){
			if(ereg('^user_id_', $param_key)){
				$sup_users_id[] = $param;
			}
		}
		
		return $sup_users_id;
	}
	
	/**
	 * 
	 * @param unknown_type $parameters
	 */
	private static function getSupMethodsOfPaymentId($parameters){
		
		$sup_mop_id = array();
		
		foreach($parameters as $param_key => $param){
			if(ereg('^method_of_payment_id_', $param_key)){
				$sup_mop_id[] = $param;
			}
		}
		
		return $sup_mop_id;
	}
	
	/**
	 * 
	 * @param unknown_type $parameters
	 */
	private static function getSupAccountId($parameters){
		
		$sup_account_id = array();
		
		foreach($parameters as $param_key => $param){
			if(ereg('^account_id_', $param_key)){
				$sup_account_id[] = $param;
			}
		}
		
		return $sup_account_id;
	}
	
	/**
	 * 
	 * @param unknown_type $parameters
	 */
	private static function getSupComputerId($parameters){
		
		$sup_computer_id = array();
		
		foreach($parameters as $param_key => $param){
			if(ereg('^computer_id_', $param_key)){
				$sup_computer_id[] = $param;
			}
		}
		
		return $sup_computer_id;
	}
	
	
}
