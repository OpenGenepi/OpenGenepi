<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Act', 'doctrine');

/**
 * BaseAct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $designation
 * @property string $shortened_designation
 * @property string $comment
 * @property float $quantity
 * @property string $duration
 * @property integer $max_members
 * @property float $extra_cost
 * @property integer $disabled
 * @property integer $act_type_id
 * @property integer $unity_id
 * @property timestamp $beginning_datetime
 * @property date $end_date
 * @property string $recurrence
 * @property integer $monetary_account
 * @property Unity $Unity
 * @property ActType $ActType
 * @property Doctrine_Collection $Account
 * @property Doctrine_Collection $ActPrice
 * @property Doctrine_Collection $Imputation
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method string              getDesignation()           Returns the current record's "designation" value
 * @method string              getShortenedDesignation()  Returns the current record's "shortened_designation" value
 * @method string              getComment()               Returns the current record's "comment" value
 * @method float               getQuantity()              Returns the current record's "quantity" value
 * @method string              getDuration()              Returns the current record's "duration" value
 * @method integer             getMaxMembers()            Returns the current record's "max_members" value
 * @method float               getExtraCost()             Returns the current record's "extra_cost" value
 * @method integer             getDisabled()              Returns the current record's "disabled" value
 * @method integer             getActTypeId()             Returns the current record's "act_type_id" value
 * @method integer             getUnityId()               Returns the current record's "unity_id" value
 * @method timestamp           getBeginningDatetime()     Returns the current record's "beginning_datetime" value
 * @method date                getEndDate()               Returns the current record's "end_date" value
 * @method string              getRecurrence()            Returns the current record's "recurrence" value
 * @method integer             getMonetaryAccount()       Returns the current record's "monetary_account" value
 * @method Unity               getUnity()                 Returns the current record's "Unity" value
 * @method ActType             getActType()               Returns the current record's "ActType" value
 * @method Doctrine_Collection getAccount()               Returns the current record's "Account" collection
 * @method Doctrine_Collection getActPrice()              Returns the current record's "ActPrice" collection
 * @method Doctrine_Collection getImputation()            Returns the current record's "Imputation" collection
 * @method Act                 setId()                    Sets the current record's "id" value
 * @method Act                 setDesignation()           Sets the current record's "designation" value
 * @method Act                 setShortenedDesignation()  Sets the current record's "shortened_designation" value
 * @method Act                 setComment()               Sets the current record's "comment" value
 * @method Act                 setQuantity()              Sets the current record's "quantity" value
 * @method Act                 setDuration()              Sets the current record's "duration" value
 * @method Act                 setMaxMembers()            Sets the current record's "max_members" value
 * @method Act                 setExtraCost()             Sets the current record's "extra_cost" value
 * @method Act                 setDisabled()              Sets the current record's "disabled" value
 * @method Act                 setActTypeId()             Sets the current record's "act_type_id" value
 * @method Act                 setUnityId()               Sets the current record's "unity_id" value
 * @method Act                 setBeginningDatetime()     Sets the current record's "beginning_datetime" value
 * @method Act                 setEndDate()               Sets the current record's "end_date" value
 * @method Act                 setRecurrence()            Sets the current record's "recurrence" value
 * @method Act                 setMonetaryAccount()       Sets the current record's "monetary_account" value
 * @method Act                 setUnity()                 Sets the current record's "Unity" value
 * @method Act                 setActType()               Sets the current record's "ActType" value
 * @method Act                 setAccount()               Sets the current record's "Account" collection
 * @method Act                 setActPrice()              Sets the current record's "ActPrice" collection
 * @method Act                 setImputation()            Sets the current record's "Imputation" collection
 * 
 * @package    GENEPI
 * @subpackage model
 * @author     Pierre Boitel, Bastien Libersa, Paul Périé
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseAct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('act');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('designation', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('shortened_designation', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('comment', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '250',
             ));
        $this->hasColumn('quantity', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('duration', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '45',
             ));
        $this->hasColumn('max_members', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('extra_cost', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('disabled', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '1',
             ));
        $this->hasColumn('act_type_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('unity_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('beginning_datetime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('end_date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('recurrence', 'string', 8, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '8',
             ));
        $this->hasColumn('monetary_account', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '1',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Unity', array(
             'local' => 'unity_id',
             'foreign' => 'id'));

        $this->hasOne('ActType', array(
             'local' => 'act_type_id',
             'foreign' => 'id'));

        $this->hasMany('Account', array(
             'local' => 'id',
             'foreign' => 'act_id'));

        $this->hasMany('ActPrice', array(
             'local' => 'id',
             'foreign' => 'act_id'));

        $this->hasMany('Imputation', array(
             'local' => 'id',
             'foreign' => 'act_id'));
    }
}